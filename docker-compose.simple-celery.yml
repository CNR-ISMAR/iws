version: '2.2'
services:

  db:
#    image: geonode/postgis:9.6
    build: ./postgis
    restart: unless-stopped
    container_name: db4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
      org.geonode.component: db
      org.geonode.instance.name: geonode
    volumes:
      - dbdata:/var/lib/postgresql/data
      - dbbackups:/pg_backups
    env_file:
    - ./.env
    environment:
      GEONODE_DATABASE: ${GEONODE_DATABASE_NAME}
      GEONODE_DATABASE_PASSWORD: ${GEONODE_DATABASE_PASSWORD}
      GEONODE_GEODATABASE: ${GEONODE_GEODATABASE}
      GEONODE_GEODATABASE_PASSWORD: ${GEONODE_GEODATABASE_PASSWORD}
      DSS_PHAROS: ${DSS_PHAROS_NAME}
      DSS_PHAROS_PASSWORD: ${DSS_PHAROS_PASSWORD}
      SEASTORM: ${SEASTORM_NAME}
      SEASTORM_PASSWORD: ${SEASTORM_PASSWORD}

  celery:
    restart: unless-stopped
    build: .
    container_name: celery4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
      org.geonode.component: celery
      org.geonode.instance.name: geonode
    depends_on:
      - db
      - elasticsearch
      - rabbitmq
      - data-dir-conf
    command: celery worker --app=${COMPOSE_PROJECT_NAME}.celeryapp:app -B -l INFO
    volumes:
      - .:/usr/src/iws
      - statics:/mnt/volumes/statics
      - geoserver-data-dir:/geoserver_data/data
    env_file:
    - ./.env
    environment:
      DJANGO_SETTINGS_MODULE: ${COMPOSE_PROJECT_NAME}.settings
      GEONODE_INSTANCE_NAME: geonode
      DEFAULT_BACKEND_DATASTORE: datastore
      GEONODE_DATABASE: ${GEONODE_DATABASE_NAME}
      GEONODE_DATABASE_PASSWORD: ${GEONODE_DATABASE_PASSWORD}
      GEONODE_GEODATABASE: ${GEONODE_GEODATABASE}
      GEONODE_GEODATABASE_PASSWORD: ${GEONODE_GEODATABASE_PASSWORD}
      DSS_PHAROS: ${DSS_PHAROS_NAME}
      DSS_PHAROS_PASSWORD: ${DSS_PHAROS_PASSWORD}
      SEASTORM: ${SEASTORM_NAME}
      SEASTORM_PASSWORD: ${SEASTORM_PASSWORD}
      ASYNC_SIGNALS: 'True'
      BROKER_URL: amqp://guest:guest@rabbitmq:5672
      DOCKER_ENV: development
      IS_CELERY: 'True'
      C_FORCE_ROOT: 1
      # replaced with defaults in settings
      GEOSERVER_LOCATION: http://geoserver:8080/geoserver/
      OGC_REQUEST_TIMEOUT: 300
      STATIC_ROOT: /mnt/volumes/statics/static/
      MEDIA_ROOT: /mnt/volumes/statics/uploaded/
      GEOIP_PATH: /mnt/volumes/statics/geoip.db
      ADMIN_EMAILS: ''
      DEFAULT_BACKEND_UPLOADER: geonode.importer
      TIME_ENABLED: 'True'
      MOSAIC_ENABLED: 'False'
      GEOGIG_ENABLED: 'False'
      HAYSTACK_SEARCH: 'False'
      HAYSTACK_ENGINE_URL: http://elasticsearch:9200/
      HAYSTACK_ENGINE_INDEX_NAME: haystack
      HAYSTACK_SEARCH_RESULTS_PER_PAGE: 200
      DOCKER_API_VERSION: "1.24"
      DEBUG: 'True'
      GEONODE_LB_HOST_IP: localhost
      GEONODE_LB_PORT: 80
      SITEURL: http://localhost/
      ALLOWED_HOSTS: "['localhost','*', 'django', 'django:8000']"
      GEOSERVER_PUBLIC_LOCATION: http://localhost/gs/

  django:
    restart: unless-stopped
    build: .
    container_name: django4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
      org.geonode.component: django
      org.geonode.instance.name: geonode
    depends_on:
      - db
      - elasticsearch
      - rabbitmq
      - data-dir-conf
    command: python manage.py runserver --settings=iws.settings 0.0.0.0:8000
    volumes:
      - .:/usr/src/iws
      - statics:/mnt/volumes/statics
      - geoserver-data-dir:/geoserver_data/data
    env_file:
    - ./.env
    environment:
      DJANGO_SETTINGS_MODULE: ${COMPOSE_PROJECT_NAME}.settings
      GEONODE_INSTANCE_NAME: geonode
      DEFAULT_BACKEND_DATASTORE: datastore
      GEONODE_DATABASE: ${GEONODE_DATABASE_NAME}
      GEONODE_DATABASE_PASSWORD: ${GEONODE_DATABASE_PASSWORD}
      GEONODE_GEODATABASE: ${GEONODE_GEODATABASE}
      GEONODE_GEODATABASE_PASSWORD: ${GEONODE_GEODATABASE_PASSWORD}
      DSS_PHAROS: ${DSS_PHAROS_NAME}
      DSS_PHAROS_PASSWORD: ${DSS_PHAROS_PASSWORD}
      SEASTORM: ${SEASTORM_NAME}
      SEASTORM_PASSWORD: ${SEASTORM_PASSWORD}
      ASYNC_SIGNALS: 'True'
      BROKER_URL: amqp://guest:guest@rabbitmq:5672
      DOCKER_ENV: development
      IS_CELERY: 'False'
      C_FORCE_ROOT: 1
      # replaced with defaults in settings
      GEOSERVER_LOCATION: http://geoserver:8080/geoserver/
      OGC_REQUEST_TIMEOUT: 300
      STATIC_ROOT: /mnt/volumes/statics/static/
      MEDIA_ROOT: /mnt/volumes/statics/uploaded/
      GEOIP_PATH: /mnt/volumes/statics/geoip.db
      ADMIN_EMAILS: ''
      DEFAULT_BACKEND_UPLOADER: geonode.importer
      TIME_ENABLED: 'True'
      MOSAIC_ENABLED: 'False'
      GEOGIG_ENABLED: 'False'
      HAYSTACK_SEARCH: 'False'
      HAYSTACK_ENGINE_URL: http://elasticsearch:9200/
      HAYSTACK_ENGINE_INDEX_NAME: haystack
      HAYSTACK_SEARCH_RESULTS_PER_PAGE: 200
      DOCKER_API_VERSION: "1.24"
      DEBUG: 'True'
      GEONODE_LB_HOST_IP: localhost
      GEONODE_LB_PORT: 80
      SITEURL: http://localhost/
      ALLOWED_HOSTS: '${ALLOWED_HOSTS}'
      GEOSERVER_PUBLIC_LOCATION: http://localhost/gs/

  geonode:
    image: geonode/nginx:development
    restart: unless-stopped
    container_name: nginx4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: nginx
        org.geonode.instance.name: geonode
    depends_on:
      - django
#      - celery
#      - geoserver
    ports:
      - ${GEONODE_PUBLIC_PORT}:80
    expose:
      - ${GEONODE_PUBLIC_PORT}
    volumes:
      - ./scripts/misc/nginx.conf:/etc/nginx/nginx.conf
      - statics:/mnt/volumes/statics
      - ./iws/storage:/mnt/volumes/storage

#  istorm:
#    container_name: istorm
#    build:
#      context: ${PWD}/istorm
#      dockerfile: Dockerfile
#    command: "npm run start"
#    volumes:
#    - ${PWD}/istorm/app:/usr/src/app/app
#    - ${PWD}/istorm/build:/usr/src/app/build
#    - ${PWD}/istorm/internals:/usr/src/app/internals
#    - ${PWD}/istorm/package.json:/usr/src/app/package.json
#    - ${PWD}/istorm/babel.config.js:/usr/src/app/babel.config.js
#    - ${PWD}/istorm/.eslintrc.js:/usr/src/app/.eslintrc.js
#    - ${PWD}/istorm/.gitfake /usr/src/app/.git
#    ports:
#    - "3000:3000"
#    expose:
#    - "3000"

  rabbitmq:
    image: rabbitmq
    restart: unless-stopped
    container_name: rabbitmq4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    tty: true
    labels:
      org.geonode.component: rabbitmq
      org.geonode.instance.name: geonode

  data-dir-conf:
    image: geonode/geoserver_data:2.14.x
    restart: on-failure
    container_name: gsconf4${COMPOSE_PROJECT_NAME}
    labels:
        org.geonode.component: conf
        org.geonode.instance.name: geonode
    command: /bin/true
    # command: tail -f /dev/null
    volumes:
      - geoserver-data-dir:/geoserver_data/data

  elasticsearch:
    image: elasticsearch:2.4.1
    restart: unless-stopped
    container_name: elasticsearch4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    tty: true
    labels:
        org.geonode.component: elasticsearch
        org.geonode.instance.name: geonode
volumes:
  geoserver-data-dir:
  dbdata:
  dbbackups:
  statics:
