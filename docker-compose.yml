version: "2.0"
services:

  db:
    image: geonode/postgis:10
    #image: iws_db:modified
    restart: unless-stopped
    container_name: db4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
      org.geonode.component: db
      org.geonode.instance.name: geonode
    ports:
      - 5432:5432
    volumes:
      - ./volumes/dbdata:/var/lib/postgresql/data
      - ./volumes/dbbackups:/pg_backups
    env_file:
    - ./.env
    environment:
      GEONODE_DATABASE: ${GEONODE_DATABASE_NAME}
      GEONODE_DATABASE_PASSWORD: ${GEONODE_DATABASE_PASSWORD}
      GEONODE_GEODATABASE: ${GEONODE_GEODATABASE}
      GEONODE_GEODATABASE_PASSWORD: ${GEONODE_GEODATABASE_PASSWORD}

  elasticsearch:
    image: elasticsearch:2.4.1
    restart: unless-stopped
    container_name: elasticsearch4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    tty: true
    labels:
        org.geonode.component: elasticsearch
        org.geonode.instance.name: geonode

  rabbitmq:
    image: rabbitmq
    restart: unless-stopped
    container_name: rabbitmq4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    tty: true
    labels:
        org.geonode.component: rabbitmq
        org.geonode.instance.name: geonode

  celery:
    restart: unless-stopped
    build: .
    container_name: celery4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: celery
        org.geonode.instance.name: geonode
    depends_on:
      - db
      - elasticsearch
      - rabbitmq
    # command: celery worker --app=iws.celeryapp:app -B -l INFO
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./volumes/statics:/mnt/volumes/statics
      - ./volumes/geoserver-data-dir/data:/geoserver_data/data
    env_file:
    - ./django.env
    environment:
      DJANGO_SETTINGS_MODULE: iws.settings
      GEONODE_INSTANCE_NAME: geonode
      GEONODE_LB_HOST_IP:
      GEONODE_LB_PORT:
      DEFAULT_BACKEND_DATASTORE: datastore
      GEONODE_DATABASE: ${GEONODE_DATABASE_NAME}
      GEONODE_DATABASE_PASSWORD: ${GEONODE_DATABASE_PASSWORD}
      GEONODE_GEODATABASE: ${GEONODE_GEODATABASE}
      GEONODE_GEODATABASE_PASSWORD: ${GEONODE_GEODATABASE_PASSWORD}
      ASYNC_SIGNALS: 'True'
      BROKER_URL: amqp://guest:guest@rabbitmq:5672
      CELERY_CMD: celery worker --app=iws.celeryapp:app --broker=amqp://guest:guest@rabbitmq:5672/ -B -l INFO
      # CELERY_CMD: celery worker --app=iws.celeryapp:app --broker=memory:// -B -l INFO
      DOCKER_ENV: production
      IS_CELERY: 'True'
      C_FORCE_ROOT: 1
      #SITEURL: http://localhost/
      # replaced with defaults in settings
      #GEOSERVER_PUBLIC_LOCATION: http://localhost/gs/
      GEOSERVER_LOCATION: http://geoserver:8080/geoserver/
      OGC_REQUEST_TIMEOUT: 300
      STATIC_ROOT: /mnt/volumes/statics/static
      MEDIA_ROOT: /mnt/volumes/statics/uploaded
      GEOIP_PATH: /mnt/volumes/statics/geoip.db
      ALLOWED_HOSTS: "['*']"
      ADMIN_EMAILS: ''
      DEFAULT_BACKEND_UPLOADER: geonode.importer
      TIME_ENABLED: 'True'
      MOSAIC_ENABLED: 'False'
      GEOGIG_ENABLED: 'False'
      HAYSTACK_SEARCH: 'False'
      HAYSTACK_ENGINE_URL: http://elasticsearch:9200/
      HAYSTACK_ENGINE_INDEX_NAME: haystack
      HAYSTACK_SEARCH_RESULTS_PER_PAGE: 200
      # GEOSERVER_ADMIN_PASSWORD: admin
      # See https://github.com/geosolutions-it/geonode-generic/issues/28
      # to see why we force API version to 1.24
      DOCKER_API_VERSION: "1.24"

  geoserver:
    image: geonode/geoserver:2.13.x
    restart: unless-stopped
    container_name: geoserver4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: geoserver
        org.geonode.instance.name: geonode
    depends_on:
      - db
      - elasticsearch
      - rabbitmq
      - data-dir-conf
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./volumes/geoserver-data-dir/data:/geoserver_data/data
    environment:
      # GEOSERVER_ADMIN_PASSWORD: admin
      DOCKERHOST:
      DOCKER_HOST_IP:
      GEONODE_DATABASE_HOST_IP:
      GEONODE_LB_HOST_IP:
      GEONODE_LB_PORT:
      PUBLIC_PORT: 80
      NGINX_BASE_URL:
      GEOSERVER_JAVA_OPTS: "-Djava.awt.headless=true -XX:MaxPermSize=512m -XX:PermSize=256m -Xms512m -Xmx2048m -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:ParallelGCThreads=4 -Dfile.encoding=UTF8 -Duser.timezone=GMT -Djavax.servlet.request.encoding=UTF-8 -Djavax.servlet.response.encoding=UTF-8 -Duser.timezone=GMT -Dorg.geotools.shapefile.datetime=true"

  django:
    restart: unless-stopped
    #image: iws_nginx:latest
    build: .
    container_name: django4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
      org.geonode.component: django
      org.geonode.instance.name: geonode
    depends_on:
      - db
      - elasticsearch
      - rabbitmq
      - data-dir-conf
    # command: paver start_django -b 0.0.0.0:8000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./volumes/statics:/mnt/volumes/statics
      - ./volumes/geoserver-data-dir/data:/geoserver_data/data
    env_file:
      - ./.env
    environment:
      DJANGO_SETTINGS_MODULE: iws.settings
      GEONODE_INSTANCE_NAME: geonode
      GEONODE_LB_HOST_IP:
      GEONODE_LB_PORT:
      DEFAULT_BACKEND_DATASTORE: datastore
      GEONODE_DATABASE: ${GEONODE_DATABASE_NAME}
      GEONODE_DATABASE_PASSWORD: ${GEONODE_DATABASE_PASSWORD}
      GEONODE_GEODATABASE: ${GEONODE_GEODATABASE}
      GEONODE_GEODATABASE_PASSWORD: ${GEONODE_GEODATABASE_PASSWORD}
      ASYNC_SIGNALS: 'True'
      BROKER_URL: amqp://guest:guest@rabbitmq:5672
      DOCKER_ENV: production
      UWSGI_CMD: uwsgi --ini /usr/src/iws/uwsgi.ini
      IS_CELERY: 'False'
      C_FORCE_ROOT: 1
      SITEURL: http://localhost/
      # replaced with defaults in settings
      # GEOSERVER_PUBLIC_LOCATION: http://localhost/gs/
      GEOSERVER_LOCATION: http://geoserver:8080/geoserver/
      OGC_REQUEST_TIMEOUT: 300
      STATIC_ROOT: /mnt/volumes/statics/static
      MEDIA_ROOT: /mnt/volumes/statics/uploaded
      GEOIP_PATH: /mnt/volumes/statics/geoip.db
      ALLOWED_HOSTS: "['*']"
      ADMIN_EMAILS: ''
      DEFAULT_BACKEND_UPLOADER: geonode.importer
      TIME_ENABLED: 'True'
      MOSAIC_ENABLED: 'False'
      GEOGIG_ENABLED: 'False'
      HAYSTACK_SEARCH: 'False'
      HAYSTACK_ENGINE_URL: http://elasticsearch:9200/
      HAYSTACK_ENGINE_INDEX_NAME: haystack
      HAYSTACK_SEARCH_RESULTS_PER_PAGE: 200
      # GEOSERVER_ADMIN_PASSWORD: admin
      # See https://github.com/geosolutions-it/geonode-generic/issues/28
      # to see why we force API version to 1.24
      DOCKER_API_VERSION: "1.24"

  geonode:
    # image: geonode/nginx:geoserver
    image: iws_nginx:latest
    restart: unless-stopped
    container_name: nginx4${COMPOSE_PROJECT_NAME}
    stdin_open: true
    # tty: true
    labels:
        org.geonode.component: nginx
        org.geonode.instance.name: geonode
    depends_on:
      - django
      - celery
      - geoserver
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./volumes/statics:/mnt/volumes/statics
      - ./volumes/nginxconf:/etc/nginx/nginxconf
      - /etc/ssl/certs:/etc/ssl/certs
      - /etc/ssl/private:/etc/ssl/private


  data-dir-conf:
    image: geonode/geoserver_data:2.13.x
    restart: on-failure
    container_name: gsconf4${COMPOSE_PROJECT_NAME}
    labels:
        org.geonode.component: conf
        org.geonode.instance.name: geonode
    command: /bin/true
    # command: tail -f /dev/null
    volumes:
      - ./volumes/geoserver-data-dir/data:/geoserver_data/data

  tds-production:
    image: unidata/thredds-docker:4.6.12
    ports:
      - "82:8080"
      - "445:8443"
      - "8445:8443"
    container_name: tds4${COMPOSE_PROJECT_NAME}

    volumes:
      - ./volumes/tds/tomcat/logs/:/usr/local/tomcat/logs/
      - ./volumes/tds/thredds/logs/:/usr/local/tomcat/content/thredds/logs/
      #- /path/to/your/tomcat-users.xml:/usr/local/tomcat/conf/tomcat-users.xml
      - ./volumes/tds/thredds/directory:/usr/local/tomcat/content/thredds
      #- /usr3/tds/data/:/usr/local/tomcat/content/data
      - ./volumes/tds/tomcat/conf:/usr/local/tomcat/conf/
      #- ./volumes/tds/data/directory1:/path/to/your/data/directory2
    env_file:
      - "tds.env"



volumes:
  geoserver-data-dir:
#    name: ${COMPOSE_PROJECT_NAME}-gsdatadir
  dbdata:
#    name: ${COMPOSE_PROJECT_NAME}-dbdata
  dbbackups:
#     driver: ${BACKUPS_VOLUME_DRIVER}
#    name: ${COMPOSE_PROJECT_NAME}-dbbackups
  statics:
#    name: ${COMPOSE_PROJECT_NAME}-statics

